# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _webrtc_audio_processing
else:
    import _webrtc_audio_processing

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class AudioProcessingModule(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, aec_type=0, enable_ns=False, agc_type=0, enable_vad=False, sample_rate=16000, sample_channels=1):
        _webrtc_audio_processing.AudioProcessingModule_swiginit(self, _webrtc_audio_processing.new_AudioProcessingModule(aec_type, enable_ns, agc_type, enable_vad, sample_rate, sample_channels))

    def process_stream(self, stream):
        return _webrtc_audio_processing.AudioProcessingModule_process_stream(self, stream)

    def process_reverse_stream(self, data):
        return _webrtc_audio_processing.AudioProcessingModule_process_reverse_stream(self, data)

    def has_echo(self):
        return _webrtc_audio_processing.AudioProcessingModule_has_echo(self)

    def has_voice(self):
        return _webrtc_audio_processing.AudioProcessingModule_has_voice(self)

    def set_system_delay(self, delay):
        return _webrtc_audio_processing.AudioProcessingModule_set_system_delay(self, delay)

    def set_stream_format(self, rate, channels, out_rate=16000, out_channels=1):
        return _webrtc_audio_processing.AudioProcessingModule_set_stream_format(self, rate, channels, out_rate, out_channels)

    def set_reverse_stream_format(self, rate, channels):
        return _webrtc_audio_processing.AudioProcessingModule_set_reverse_stream_format(self, rate, channels)

    def vad_level(self):
        return _webrtc_audio_processing.AudioProcessingModule_vad_level(self)

    def set_vad_level(self, level):
        return _webrtc_audio_processing.AudioProcessingModule_set_vad_level(self, level)

    def ns_level(self):
        return _webrtc_audio_processing.AudioProcessingModule_ns_level(self)

    def set_ns_level(self, level):
        return _webrtc_audio_processing.AudioProcessingModule_set_ns_level(self, level)

    def aec_level(self):
        return _webrtc_audio_processing.AudioProcessingModule_aec_level(self)

    def set_aec_level(self, level):
        return _webrtc_audio_processing.AudioProcessingModule_set_aec_level(self, level)

    def set_agc_level(self, level):
        return _webrtc_audio_processing.AudioProcessingModule_set_agc_level(self, level)

    def agc_level(self):
        return _webrtc_audio_processing.AudioProcessingModule_agc_level(self)

    def set_agc_target(self, dbfs):
        return _webrtc_audio_processing.AudioProcessingModule_set_agc_target(self, dbfs)
    __swig_destroy__ = _webrtc_audio_processing.delete_AudioProcessingModule

# Register AudioProcessingModule in _webrtc_audio_processing:
_webrtc_audio_processing.AudioProcessingModule_swigregister(AudioProcessingModule)



